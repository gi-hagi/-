プログラミング言語を分類すると「動的型付け言語」と
「静的型付け言語」の２種類がありますが、Rubyは「動的型付け言語」で、Javaは「静的型付け言語」です。

「データ型とは」
データ型とは、変数に格納するデータの種類のことです。
Rubyカリキュラムですでに学習したように、「数値としての1」と「文字としての1」はプログラムの上では異なるものとして扱われます。
データ型は、このような「数値」や「文字」といった種類をより細かく定めたもので、Javaの基本データ型には8つの種類があります。

現在のコンピュータでは、性質上2進数しか扱えません。
例えば10進数の「100」は、2進数では「1100100」になります。

10進数         2進数
100	          1100100
10,000	      10011100010000
1,000,000	    11110100001001000000

100を格納するには「7個の箱」が、1,000,000（100万）を格納するには「20個の箱」が必要になります。

[基本データ型の種類]
Javaの基本データ型は以下の8種類です。

表の「bit」はメモリの「1箱分」に相当します。


データ型	  bit数  	値
boolean	   1bit	  true あるいは false
char	     16bit 	文字
byte	     8bit	  整数（扱える範囲は -128～127）
short	     16bit	整数（扱える範囲は-32,768～32,767）
int	       32bit	整数（扱える範囲は-2,147,483,648～2,147,483,647）
long	     64bit	整数（扱える範囲は-9223372036854775808～9223372036854775807）
float	     32bit	小数（精度低）
double	   64bit	小数（精度高）


この中で、使用頻度が高いのはint型とlong型です。
小さめの数値を扱うint型では「32bit」、大きめの数値を扱うlong型では「64bit」のメモリを使用することから、扱う数値が大きくなると必要なメモリサイズも増えることがわかります。
Javaで変数を使用する際は、その変数をどのデータ型として扱うのかプログラムに伝えるため、あらかじめ「宣言」してから使用します。

[動的型付け言語]
動的型付け言語は、プログラムの実行時に変数のデータ型を決定する方式で、Rubyはこちらに含まれます。
イメージを掴むために、以下のRubyコードを見てください。

a = 1
puts(a * 2)
# 2と出力される

a = "alphabet"
puts(a * 2)
# alphabetalphabetと出力される

前半のコードも後半のコードも、「変数a」に対して「*2」を行なっています。
ところがそれぞれ異なる処理が行われています。
aに「1」が代入されている場合は数値演算が行われ、「2」と出力されています。
一方、「"alphabet"」が代入されている場合は文字列操作が行われ、「alphabetalphabet」と出力されています。
これは、どのような値が代入されたかによって、変数のデータ型が柔軟に変更され、そのデータ型に基づいて処理が行われていることを表しています。
このように、「プログラムの実行時に変数のデータ型が決定される仕組み」を採用している言語が、「動的型付け言語」です。


[静的型付け言語]
静的型付け言語は、動的型付け言語とは異なり、変数のデータ型を最初に決定したら変更できない仕組みです。Javaはこちらに含まれます。
最初に「整数」として宣言した変数に、「文字列」を代入しようとするとエラーになります。
柔軟性がなく不便に感じるかもしれませんが、処理が高速になったり、データ型の不整合によるエラーを実行前に検知できるなどのメリットがあります。
Javaは静的型付け言語なので、変数を使用し始める際は「型の宣言」が必要になります。

